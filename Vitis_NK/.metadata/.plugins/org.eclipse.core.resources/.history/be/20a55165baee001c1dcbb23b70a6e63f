/**
 *
 * @file mainPhotoServo
 *
 * @author Neima Kashani

 *


 *This Code uses FIT Interrupts and requires an OLED and a PMODENC but the Pmod Encoder functionality has been removed
 *This code is designeded to control a Solar Panel with 2 servos moving the direction it faces and with a sensor made of 4 Photoresistors on it that can be compared
 * to determine the relative grandiant of light on the resistors
 * The main code actually works currently but the sampling of the ADC is not as consistent as it needs to be
 *
 *
 *
 * ****** STATUS REPORT ON CURRENT BEHAVIOR ****
 * OLED_Display_Light_Signal() prints out data   UD (UP_Data), DD (DOWN_Data), LD (LEFT_Data), and RD (RIGHT_Data)  global variables to the OLED.
 * OLED_Display_Angle()  print out V%  (DEFAULT_DUTY_PERCENTAGE+vertical_Duty_Percentage_Modifier) and H% (DEFAULT_DUTY_PERCENTAGE+horiztonal_Duty_Percentage_Modifier) to the OLED.

 * UD, DD, LD, and RD are each updated from the XADC output using a GPIO connection in the FIT handler.
 * The main function LightFollow() calls Light_Servo_Calculations() which uses  UD, DD, LD, and RD to update
 * horizontal_Duty_Percentage_Modifier and vertical_Duty_Percentage_Modifier, which are then used to update the PWM duty cycles.
 * LightFollow() then calls OLED_Display_Light_Signal() and   OLED_Display_Angle().

 * I had originally assumed that our XADC was converting the signal but that we were unable to read it out of our GPIO.
 * I had assumed this because the OLED representation of the 4 XADC channel digital signals UD, DD, LD, and RD looked to be zero.
 * This assumption was incorrect.
 * The Video shows servos moving paired with changes to V% and H%.   While recording the video I noticed that these changes to V% and H% were
 * accompanied by a brief non-zero value for UD (UP_Data), DD (DOWN_Data), LD (LEFT_Data), and RD (RIGHT_Data), but I am not sure I was able to
 * successfully show those very brief flashes.  The code was intended to update V% and H% based on comparisons of UD, DD, LD, and RD but I had assumed that
 * UD, DD, LD, and RD would normally have nonzero values.     The FIT Handler occurs far more frequently than the OLED writing function and
 * Light_Servo_Calculations() are called so I think what is happening is that our variables are getting set in FIT to non-zero values but are often getting set back to zero before
 * anything is done with them by  Light_Servo_Calculations(), OLED_Display_Light_Signal(), or OLED_Display_Angle().
 * I think the erratic servo movement happens when the converted values are kept all the way until they are used, which causes the servos to move themselves as intended
 *
 ******************************************************************************/


#ifndef SOLARSERVO_H   /* prevent circular inclusions */
#define SOLARSERVO_H   /* by using protection macros */




#endif  /* end of protection macro */
