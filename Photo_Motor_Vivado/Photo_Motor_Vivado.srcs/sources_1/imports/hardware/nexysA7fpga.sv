// nexysA7fpga.sv - Top level module for the Nexys A7 version of the ECE 544 Getting Started project
//
// Created By:	Roy Kravitz
// Date:		26-March-2022
// Version:		2.0
//
// Description:
// ------------
// This module provides the top level for the Getting Started hardware which
// includes the Nexys A7 and no Pmods. Project #1 will add a PmodOLEDrgb and a
// a PmodENC to the system but we didn't want to hold up you working on this
// project while waiting for your Pmods to arrive.
//////////////////////////////////////////////////////////////////////




module nexysA7fpga(
    input logic         clk,			// 100Mhz clock input
    input logic         btnC,			// center pushbutton
    input logic         btnU,			// UP (North) pusbhbutton
    input logic         btnL,			// LEFT (West) pushbutton
    input logic         btnD,			// DOWN (South) pushbutton  - used for system reset
    input logic         btnR,			// RIGHT (East) pushbutton
	input logic         btnCpuReset,	// CPU reset pushbutton
    input logic [15:0]  sw,				// slide switches on Nexys 4
    output logic [15:0] led,			// LEDs on Nexys 4   
    output logic        RGB1_Blue,      // RGB1 LED (LD16) 
    output logic        RGB1_Green,
    output logic        RGB1_Red,
    output logic        RGB2_Blue,      // RGB2 LED (LD17)
    output logic        RGB2_Green,
    output logic        RGB2_Red,
    output logic [7:0]  an,             // Seven Segment display
    output logic [6:0]  seg,
    output logic        dp,             // decimal point display on the seven segment 
    
    input logic         uart_rtl_rxd,	// USB UART Rx and Tx on Nexys 4
    output logic        uart_rtl_txd,	
    
	inout logic [7:0]  JA,              // JA Pmod conector - Can be used for debugging purposes
	inout logic [7:0]  JB,              // 2 of the pins go to VCC3V3 and 2 go to ground so only 8 are actually used
	inout logic [7:0]  JC,              // 2 of the pins go to VCC3V3 and 2 go to ground so only 8 are actually used
    inout logic [7:0]  JD,              // 2 of the pins go to VCC3V3 and 2 go to ground so only 8 are actually used
    input   vauxn2,   
    input   vauxp2,
    input   vauxn3,   
    input   vauxp3,
    input   vauxn10,   
    input   vauxp10,
    input   vauxn11,   
    input   vauxp11

);

// internal variables
// Clock and Reset 
logic           sysclk; 
logic           sysreset_n, sysreset;

// GPIO pins 
logic [7:0]	    gpio_in;				// embsys GPIO input port
logic [7:0]	    gpio_out;				// embsys GPIO output port

// RGB LED 
logic           w_RGB1_Red, w_RGB1_Blue, w_RGB1_Green;

// LED pins 
logic [15:0]    led_int;                // Nexys4IO drives these outputs

// make the connections to the GPIO port.  Most of the bits are unused in the Getting
// Started project but GPIO's provide a convenient way to get the inputs and
// outputs from logic you create to and from the Microblaze.  For example,
// you may decide that using an axi_gpio peripheral is a good way to interface
// your hardware pulse-width detect logic with the Microblaze.  Our application
// is simple.
// Wrap the RGB led output back to the application program for software pulse-width detect
assign gpio_in = {5'b00000, w_RGB1_Red, w_RGB1_Blue, w_RGB1_Green};

// Drive the leds from the signal generated by the microblaze 
assign led = led_int;                   // LEDs are driven by led

// make the connections
// system-wide signals
assign sysclk = clk;
assign sysreset_n = btnCpuReset;		// The CPU reset pushbutton is asserted low.  The other pushbuttons are asserted high
										// but the Microblaze for Nexys 4 expects reset to be asserted low
assign sysreset = ~sysreset_n;			// Generate a reset signal that is asserted high for any logic blocks expecting it.

// JA can be used for debug purposes
//assign JA = 8'b0000000;

// instantiate the embedded system
embsys EMBSYS
(
        // RGB1/2 Led's 
        .RGB1_Blue_0(RGB1_Blue),
        .RGB1_Green_0(RGB1_Green),
        .RGB1_Red_0(RGB1_Red),
        .RGB2_Blue_0(RGB2_Blue),
        .RGB2_Green_0(RGB2_Green),
        .RGB2_Red_0(RGB2_Red),
        // Seven Segment Display anode control  
        .an_0(an),
        .dp_0(dp),
        .led_0(led_int),
        .seg_0(seg),
        // Push buttons and switches  
        .btnC_0(btnC),
        .btnD_0(btnD),
        .btnL_0(btnL),
        .btnR_0(btnR),
        .btnU_0(btnU),
        .sw_0(sw),
        // reset and clock 
        .sysreset_n(sysreset_n),
        .sysclk(sysclk),
        // UART pins 
        .uart_rtl_0_rxd(uart_rtl_rxd),
        .uart_rtl_0_txd(uart_rtl_txd),
        
        
        //PWM Generator pins  
        .PWM(JA),
        
        
        //PmodOLEDrgb pins
        .PmodOLEDrgb_out_0_pin1_i(),
        .PmodOLEDrgb_out_0_pin1_o(JB[0]),
        .PmodOLEDrgb_out_0_pin1_t(),
        .PmodOLEDrgb_out_0_pin2_i(),
        .PmodOLEDrgb_out_0_pin2_o(JB[1]),
        .PmodOLEDrgb_out_0_pin2_t(),
        .PmodOLEDrgb_out_0_pin3_i(),
        .PmodOLEDrgb_out_0_pin3_o(JB[2]),
        .PmodOLEDrgb_out_0_pin3_t(),
        .PmodOLEDrgb_out_0_pin4_i(),
        .PmodOLEDrgb_out_0_pin4_o(JB[3]),
        .PmodOLEDrgb_out_0_pin4_t(),
        //Pin5 and Pin6 do not exist
        .PmodOLEDrgb_out_0_pin7_i(),
        .PmodOLEDrgb_out_0_pin7_o(JB[4]),
        .PmodOLEDrgb_out_0_pin7_t(),
        .PmodOLEDrgb_out_0_pin8_i(),
        .PmodOLEDrgb_out_0_pin8_o(JB[5]),
        .PmodOLEDrgb_out_0_pin8_t(),
        .PmodOLEDrgb_out_0_pin9_i(),
        .PmodOLEDrgb_out_0_pin9_o(JB[6]),
        .PmodOLEDrgb_out_0_pin9_t(),
        .PmodOLEDrgb_out_0_pin10_i(),
        .PmodOLEDrgb_out_0_pin10_o(JB[7]),
        .PmodOLEDrgb_out_0_pin10_t(),
        //

        //
        //PMOD Port for JXADC
        .Vaux2_v_n(vauxn2),
        .Vaux2_v_p(vauxp2),
        .Vaux3_v_n(vauxn3),
        .Vaux3_v_p(vauxp3),
        .Vaux10_v_n(vauxn10),
        .Vaux10_v_p(vauxp10),
        .Vaux11_v_n(vauxn11),
        .Vaux11_v_p(vauxp11),
        
        //PMOD ENCODER Ports
        .encA(JC[4]),     // A and B quadrature inputs from PmodENC
        .encB(JC[5]),
        .encBTN(JC[6]),   // pushbutton input from PmodENC
        .encSWT(JC[7]) 
        

);

endmodule: nexysA7fpga


